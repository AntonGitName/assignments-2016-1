# 02 - Пул потоков

**Дедлайн**: 2016/05/02 23:59

## Задание
* В задании нужно реализовать простой пул задач с фиксированным числом потоков
(это число задается в конструкторе)
* При создании объекта ThreadPoolImpl в нем должно начать работу n потоков
* По сути у каждого потока есть два состояния: ожидание задачи / выполнение
задачи
* Задача — вычисление некоторого значения, объект типа `Supplier<R>`
* При добавлении задачи, если в пуле есть ожидающий поток, то он
должен приступить к ее исполнению. Иначе задача будет ожидать исполнения пока не
освободится какой-нибудь поток
* Задачи, принятные к исполнению, представлены в виде объектов интерфейса
`LightFuture`
    * Метод `isReady` имеет очевидную семантику
    * Метод `get` возвращает результат выполения задачи. В случае, если
    соответствующий задаче `supplier` завершился с исключением, этот метод
    должен завершиться с исключением `LightExecutionException`
    * Метод `thenApply` — принимает функцию (`Function`), которая может быть
    применена к результату данной задачи `X` и возвращает новую задачу `Y`,
    принятую к исполнению. Эта новая задача будет исполнена не ранее, чем
    завершится исходная. Причем в качестве аргумента объекту `Function` будет
    передан результат исходной задачи, и все `Y` должны исполняться на общих
    основаниях (т.е. должны разделяться между потоками пула). **NB: Метод
    thenApply может быть вызван несколько раз**
* Метод `shutdown` должен завершить работу потоков. Для того, чтобы прервать
работу потока рекомендуется воспользоваться методом `Thread.interrupt`

## Требования
* В данной работе запрещено использование содержимого пакета `java.util.concurrent`
* Все интерфейсные методы должны быть потокобезопасны
* Для каждого базового сценария использования должен быть написан несложный
    * Также должен быть написан тест проверяющий, что в тред-пуле
    действительно не менее `n` потоков
* Все возникающие в ходе выполнения задания вопросы принимаются только через
issue на github
